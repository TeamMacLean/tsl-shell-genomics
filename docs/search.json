[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shell genomics",
    "section": "",
    "text": "Preface\nThe content of this workshop is based on the material by the Data Carpentry: Introduction to the shell for genomics data (Becker et al. 2019).\nCommand line interface (CLI) and graphic user interface (GUI) are different ways of interacting with a computer’s operating system. They have different pros and cons. Most people are familiar with the GUI as it is the default interface for most software, particularly on Windows and Mac OS. When using the GUI, you see visual representations of files, folders, applications etc. When using the CLI, you work largely with text representations of files, folders, input and output etc. The shell is a program that presents a command line interface that allows you to control your computer by typing instructions with a keyboard.\nThere are several reasons to learn how to use the CLI:"
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "Shell genomics",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\n\nSetup\nDownload files required for the lesson\n\n\n\n\n00:00\n1. Introducing the Shell\nWhat is a command shell and why would I use one?\nHow can I move around on my computer?\nHow can I see what files and directories I have?\nHow can I specify the location of a file or directory on my computer?\n\n\n00:30\n2. Navigating Files and Directories\nHow can I perform operations on files outside of my working directory?\nWhat are some navigational shortcuts I can use to make my work more efficient?\n\n\n01:20\n3. Working with Files and Directories\nHow can I view and search file contents?\nHow can I create, copy and delete files and directories?\nHow can I control who has permission to modify a file?\nHow can I repeat recently used commands?\n\n\n02:05\n4. Redirection\nHow can I search within files?\nHow can I combine existing commands to do new things?\n\n\n02:50\n5. Writing Scripts and Working with Data\nHow can we automate a commonly used set of commands?\n\n\n03:30\n6. Project Organization\nHow can I organize my file system for a new bioinformatics project?\nHow can I document my work?\n\n\n04:00\nFinish\n\n\n\n\nThe actual schedule may vary slightly depending on the topics and exercises chosen by the instructor.\n\n\n\n\nBecker, Erin Alison, Anita Schürch, Tracy Teal, Sheldon John McKay, Jessica Elizabeth Mizzi, François Michonneau, Amy E. Hodge, et al. 2019. “datacarpentry/shell-genomics: Data Carpentry: Introduction to the shell for genomics data, June 2019.” Zenodo. https://doi.org/10.5281/zenodo.3260560."
  },
  {
    "objectID": "intro.html#what-is-a-shell-and-why-should-i-care",
    "href": "intro.html#what-is-a-shell-and-why-should-i-care",
    "title": "1  Introducing the shell",
    "section": "1.1 What is a shell and why should I care?",
    "text": "1.1 What is a shell and why should I care?\nA shell is a computer program that presents a command line interface which allows you to control your computer using commands entered with a keyboard instead of controlling graphical user interfaces (GUIs) with a mouse/keyboard/touchscreen combination.\nThere are many reasons to learn about the shell:\n\nMany bioinformatics tools can only be used through a command line interface. Many more have features and parameter options which are not available in the GUI. BLAST is an example. Many of the advanced functions are only accessible to users who know how to use a shell.\nThe shell makes your work less boring. In bioinformatics you often need to repeat tasks with a large number of files. With the shell, you can automate those repetitive tasks and leave you free to do more exciting things.\nThe shell makes your work less error-prone. When humans do the same thing a hundred different times (or even ten times), they’re likely to make a mistake. Your computer can do the same thing a thousand times with no mistakes.\nThe shell makes your work more reproducible. When you carry out your work in the command-line (rather than a GUI), your computer keeps a record of every step that you’ve carried out, which you can use to re-do your work when you need to. It also gives you a way to communicate unambiguously what you’ve done, so that others can inspect or apply your process to new data.\nMany bioinformatic tasks require large amounts of computing power and can’t realistically be run on your own machine. These tasks are best performed using remote computers or cloud computing, which can only be accessed through a shell.\n\nIn this lesson you will learn how to use the command line interface to move around in your file system."
  },
  {
    "objectID": "intro.html#how-to-access-the-shell",
    "href": "intro.html#how-to-access-the-shell",
    "title": "1  Introducing the shell",
    "section": "1.2 How to access the shell",
    "text": "1.2 How to access the shell\nThe Terminal is a window into which we will use to type commands in.\n\n1.2.1 Windows\nIf you’re using Windows, you need to use a separate program to access the shell. You can use MobaXterm, a terminal for Windows, that is already installed on your machine.\n\nClick on the MobaXterm icon on your desktop.\nSelect Start local terminal\n\n\n\n\n\n\n1.2.2 MacOS\nOn a Mac or Linux machine, you can access a shell through a program called “Terminal”, which is already available on your computer.\n\n\n\n\n\n\n\nTerminal\n\n\n\n\n\n\n\niTerm"
  },
  {
    "objectID": "intro.html#how-to-access-the-remote-server",
    "href": "intro.html#how-to-access-the-remote-server",
    "title": "1  Introducing the shell",
    "section": "1.3 How to access the remote server",
    "text": "1.3 How to access the remote server\nTo save time, we are going to be working on a remote server where all the necessary data and software available. When we say a ‘remote sever’, we are talking about a computer that is not the one you are working on right now. You will access the remote server where everything is prepared for the lesson. We will learn the basics of the shell by manipulating some data files. Some of these files are very large , and would take time to download to your computer. We will also be using several bioinformatic packages in later lessons and installing all of the software would take up time even more time. A ‘ready-to-go’ sever let’s us focus on learning.\n\nThe remote server is a computer cluster used for high performance computing (HPC) for the Norwich BioScience Institutes (NBI). You can log into the remote server using the command ssh, your username and the address of the server hpc.nbi.ac.uk (make sure to replace [username] by your actual TSL username).\nssh [username]@hpc.nbi.ac.uk\nYou must then input your password.\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\n\nMacOS\n\n\n\n\n\n\n\n\n\n\n\nSave your password for later\n\n\n\n\n\nMobaXterm will offer for you to save your password. It is up to you to do so.\n\n\n\nWindows\n\n\n\n\n\nMacOS\n\n\n\n\n\nAfter entering you password, you will be logged in the server and see the welcome message as seen in the screen capture below:\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\n\nMacOS\n\n\n\n\n\nThis welcome message provides a lot of information about the remote server that you’re logging into. We’re not going to use most of this information for our workshop, so you can clear your screen using the clear command.\nType the word clear into the terminal and press the Enter key.\nThis will scroll your screen down to give you a fresh screen and will make it easier to read. You haven’t lost any of the information on your screen. If you scroll up, you can see everything that has been output to your screen up until this point.\n\n\n\n\n\n\nTip\n\n\n\nHot-key combinations are shortcuts for performing common commands. The hot-key combination for clearing the console is Ctrl+L. Feel free to try it and see for yourself."
  },
  {
    "objectID": "intro.html#navigating-your-file-system",
    "href": "intro.html#navigating-your-file-system",
    "title": "1  Introducing the shell",
    "section": "1.4 Navigating your file system",
    "text": "1.4 Navigating your file system\nThe part of the operating system that manages files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called “folders”), which hold files or other directories.\nSeveral commands are frequently used to create, inspect, rename, and delete files and directories.\n\n1.4.1 Prompt\nThe dollar sign is a prompt, which shows us that the shell is waiting for input (other shell may use a different character as a prompt and may add information before the prompt). When typing commands, either from these lessons or from other sources, do not type the prompt, only the commands that follow it.\n$\n\n\n1.4.2 Print working directory\nLet’s find out where we are by running a command called pwd (which stands for “print working directory”). At any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in, unless we explicitly specify something else. Here, the computer’s response is /hpc-home/[username], which is the top level directory within our server:\n$ pwd\n/hpc-home/[username]\n\n\n1.4.3 Listing\nLet’s look at how our file system is organized. We can see what files and subdirectories are in this directory by running ls, which stands for “listing”:\n$ ls\nls prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. We’ll be working within the shell_data subdirectory, and creating new subdirectories, throughout this workshop.\n\n\n1.4.4 Make new directory\nLet’s make a new directory (folder) called shell_data for today’s session using the command mkdir for “make directory”:\n$ mkdir shell_data\nNow let’s see our new directory using the listing command ls:\n$ ls\n\n\n1.4.5 Copy directory\nOur home directory is empty. Let’s copy a directory called shell_data from the home directory of user jegoussc using the command cp for “copy”. The flag -r stands for “recursive” and specifies that we want to copy the full content of the directory shell_data:\n$ cp -r /tsl/data/shell_data/ /hpc-home/[username]/\n\n\n1.4.6 Change directory\nThe command to change locations in our file system is cd, followed by a directory name to change our working directory. cd stands for “change directory”.\n$ cd shell_data\nWe can also use the command pwd to print the current working directory:\n$ pwd\n\n\n1.4.7 Flags\nEarlier, we used the flag -r with the cp command. Let’s have a look at the content of the directory now. We can make the ls output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories:\n$ ls -F\nsra_metadata/  untrimmed_fastq/\nAnything with a “/” after it is a directory. Things with a “*” after them are programs. If there are no decorations, it’s a file.\n\n\n1.4.8 Manuals\nls has lots of other options. To find out what they are, we can type:\n$ man ls\nman (short for “manual”) displays detailed documentation (also referred as man page or man file) for bash commands. It is a powerful resource to explore bash commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboard’s down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit the key q to quit.\n\n\n\n\n\n\nExercise\n\n\n\nUse the -l option for the ls command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you don’t see with the bare ls command?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ ls -l\n\n\n\nNo one can possibly learn all of these arguments, that’s what the manual page is for. You can (and should) refer to the manual page or other help files as needed.\nLet’s go into the untrimmed_fastq directory and see what is in there.\n$ cd untrimmed_fastq\n$ ls -F\nSRR097977.fastq*  SRR098026.fastq*\nThis directory contains two files with .fastq extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson.\n\n\n1.4.9 Tab Completion\nTyping out file or directory names can waste a lot of time and it’s easy to make typing mistakes. Instead we can use tab complete as a shortcut. When you start typing out the name of a directory or file, then hit the Tab key, the shell will try to fill in the rest of the directory or file name.\nReturn to your home directory:\n$ cd\nthen enter (&lt;tab&gt; to hit the tabulation key):\n$ cd she&lt;tab&gt;\nThe shell will fill in the rest of the directory name for shell_data and auto-complete the command:\n$ cd shell_data\nNow change directories to untrimmed_fastq in shell_data\n$ cd untrimmed_fastq\nUsing tab complete can be very helpful. However, it will only auto-complete a file or directory name if you’ve typed enough characters to provide a unique identifier for the file or directory you are trying to access.\nFor example, if we now try to list the files which names start with SR by using tab complete:\n$ ls SR&lt;tab&gt;\nThe shell auto-completes your command to SRR09, because all file names in the directory begin with this prefix. When you hit Tab again, the shell will list the possible choices.\n$ ls SRR09&lt;tab&gt;&lt;tab&gt;\nSRR097977.fastq  SRR098026.fastq\nTab completion can also fill in the names of programs, which can be useful if you remember the beginning of a program name.\n$ pw&lt;tab&gt;&lt;tab&gt;\npwck      pwconv    pwd       pwdx      pwunconv  pwmake  pwscore\nDisplays the name of every program that starts with pw."
  },
  {
    "objectID": "intro.html#summary",
    "href": "intro.html#summary",
    "title": "1  Introducing the shell",
    "section": "1.5 Summary",
    "text": "1.5 Summary\nWe now know how to move around our file system using the command line. This gives us an advantage over interacting with the file system through a GUI as it allows us to work on a remote server, carry out the same set of operations on a large number of files quickly, and opens up many opportunities for using bioinformatic software that is only available in command line versions.\nIn the next few episodes, we’ll be expanding on these skills and seeing how using the command line shell enables us to make our workflow more efficient and reproducible.\n\n\n\n\n\n\nKey points\n\n\n\n\nThe shell gives you the ability to work more efficiently by using keyboard commands rather than a GUI.\nUseful commands for navigating your file system include: ls, pwd, and cd.\nMost commands take options (flags) which begin with a -.\nTab completion can reduce errors from mistyping and make work more efficient in the shell."
  },
  {
    "objectID": "navigation.html#moving-around-the-file-system",
    "href": "navigation.html#moving-around-the-file-system",
    "title": "2  Navigating Files and Directories",
    "section": "2.1 Moving around the file system",
    "text": "2.1 Moving around the file system\nWe’ve learned how to use pwd to find our current location within our file system. We’ve also learned how to use cd to change locations and ls to list the contents of a directory. Now we’re going to learn some additional commands for moving around within our file system.\nUse the commands we’ve learned so far to navigate to the shell_data/untrimmed_fastq directory, if you’re not already there.\n$ cd\n$ cd shell_data\n$ cd untrimmed_fastq\nWhat if we want to move back up and out of this directory and to our top level directory? Can we type cd shell_data? Try it and see what happens.\n$ cd shell_data\n-bash: cd: shell_data: No such file or director\nYour computer looked for a directory or file called shell_data within the directory you were already in. It didn’t know you wanted to look at a directory level above the one you were located in.\nWe have a special command to tell the computer to move us back or up one directory level.\n$ cd ..\nNow we can use pwd to make sure that we are in the directory we intended to navigate to, and ls to check that the contents of the directory are correct.\n$ pwd\n/hpc-home/[username]/shell_data\n$ ls\nsra_metadata  untrimmed_fastq\nFrom this output, we can see that .. did indeed take us back one level in our file system.\nYou can chain these together like so:\n$ ls ../../\nprints the contents of /hpc-home."
  },
  {
    "objectID": "navigation.html#hidden-directories",
    "href": "navigation.html#hidden-directories",
    "title": "2  Navigating Files and Directories",
    "section": "2.2 Hidden directories",
    "text": "2.2 Hidden directories\n\n\n\n\n\n\nExercise\n\n\n\nFind hidden directories.\nFirst navigate to the shell_data directory. There is a hidden directory within this directory. Explore the options for ls to find out how to see hidden directories. List the contents of the directory and identify the name of the text file in that directory.\nHint: hidden files and folders in Unix start with ., for example .my_hidden_directory\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFirst use the man command to look at the options for ls.\n$ man ls\nThe -a option is short for all and says that it causes ls to “not ignore entries starting with .” This is the option we want.\n$ ls -a\n.  ..  .hidden  sra_metadata  untrimmed_fastq\nThe name of the hidden directory is .hidden. We can navigate to that directory using cd.\ncd .hidden\nAnd then list the contents of the directory using ls.\n$ ls\nyoufoundit.txt\nThe name of the text file is youfoundit.txt.\n\n\n\nIn most commands the flags can be combined together in no particular order to obtain the desired results/output.\n$ ls -Fa\n$ ls -laF"
  },
  {
    "objectID": "navigation.html#examining-the-contents-of-other-directories",
    "href": "navigation.html#examining-the-contents-of-other-directories",
    "title": "2  Navigating Files and Directories",
    "section": "2.3 Examining the contents of other directories",
    "text": "2.3 Examining the contents of other directories\nBy default, the ls commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the pwd command. However, you can also give ls the names of other directories to view. Navigate to your home directory if you are not already there.\n$ cd\nThen enter the command:\n$ ls shell_data\nsra_metadata  untrimmed_fastq\nThis will list the contents of the shell_data directory without you needing to navigate there. The cd command works in a similar way.\nTry entering:\n$ cd\n$ cd shell_data/untrimmed_fastq\nThis will take you to the untrimmed_fastq directory without having to go through the intermediate directory.\n\n\n\n\n\n\nExercise\n\n\n\nNavigate to your home directory. From there, list the contents of the untrimmed_fastq directory.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ cd\n$ ls shell_data/untrimmed_fastq/\nSRR097977.fastq  SRR098026.fastq"
  },
  {
    "objectID": "navigation.html#full-vs.-relative-paths",
    "href": "navigation.html#full-vs.-relative-paths",
    "title": "2  Navigating Files and Directories",
    "section": "2.4 Full vs. Relative Paths",
    "text": "2.4 Full vs. Relative Paths\nThe cd command takes an argument which is a directory name. Directories can be specified using either a relative path or a full absolute path. The directories on the computer are arranged into a hierarchy. The full path tells you where a directory is in that hierarchy. Navigate to the home directory, then enter the pwd command.\n$ cd  \n$ pwd  \n/hpc-home/[username]\nThis is the full name of your home directory. This tells you that you are in a directory called [username], which sits inside a directory called hpc-home which sits inside the very top directory in the hierarchy. The very top of the hierarchy is a directory called / which is usually referred to as the root directory. So, to summarize: [username] is a directory in hpc-home which is a directory in /. More on root and home in the next section.\nNow enter the following command:\n$ cd /home/[username]/shell_data/.hidden\nThis jumps forward multiple levels to the .hidden directory. Now go back to the home directory.\n$ cd\nYou can also navigate to the .hidden directory using:\n$ cd shell_data/.hidden\nThese two commands have the same effect, they both take us to the .hidden directory. The first uses the absolute path, giving the full address from the home directory. The second uses a relative path, giving only the address from the working directory. A full path always starts with a /. A relative path does not.\nA relative path is like getting directions from someone on the street. They tell you to “go right at the stop sign, and then turn left on Main Street”. That works great if you’re standing there together, but not so well if you’re trying to tell someone how to get there from another country. A full path is like GPS coordinates. It tells you exactly where something is no matter where you are right now.\nYou can usually use either a full path or a relative path depending on what is most convenient. If we are in the home directory, it is more convenient to enter the full path. If we are in the working directory, it is more convenient to enter the relative path since it involves less typing.\nOver time, it will become easier for you to keep a mental note of the structure of the directories that you are using and how to quickly navigate among them.\n\n2.4.1 Navigational Shortcuts\nThe root directory is the highest level directory in your file system and contains files that are important for your computer to perform its daily work. While you will be using the root (/) at the beginning of your absolute paths, it is important that you avoid working with data in these higher-level directories, as your commands can permanently alter files that the operating system needs to function. In many cases, trying to run commands in root directories will require special permissions which are not discussed here, so it’s best to avoid them and work within your home directory. Dealing with the home directory is very common. The tilde character, ~, is a shortcut for your home directory. In our case, the root directory is two levels above our home directory, so cd or cd ~ will take you to /home/dcuser and cd / will take you to /. Navigate to the shell_data directory:\n$ cd\n$ cd shell_data\nThen enter the command:\n$ ls ~\nThis prints the contents of your home directory, without you needing to type the full path.\nThe commands cd, and cd ~ are very useful for quickly navigating back to your home directory. We will be using the ~ character in later lessons to specify our home directory."
  },
  {
    "objectID": "navigation.html#summary",
    "href": "navigation.html#summary",
    "title": "2  Navigating Files and Directories",
    "section": "2.5 Summary",
    "text": "2.5 Summary\n\n\n\n\n\n\nKey points\n\n\n\n\nThe /, ~, and .. characters represent important navigational shortcuts.\nHidden files and directories start with . and can be viewed using ls -a.\nRelative paths specify a location starting from the current location, while absolute paths specify a location from the root of the file system."
  },
  {
    "objectID": "work-with-files-and-dir.html#working-with-files",
    "href": "work-with-files-and-dir.html#working-with-files",
    "title": "3  Working with Files and Directories",
    "section": "3.1 Working with Files",
    "text": "3.1 Working with Files\n\n3.1.1 Our data set of FASTQ files\nNow that we know how to navigate around our directory structure, let’s start working with our sequencing files. We did a sequencing experiment and have two results files, which are stored in our untrimmed_fastq directory.\n\n\n3.1.2 Wildcards\nNavigate to your untrimmed_fastq directory:\n$ cd ~/shell_data/untrimmed_fastq\nWe are interested in looking at the FASTQ files in this directory. We can list all files with the .fastq extension using the command:\n$ ls *.fastq\nSRR097977.fastq  SRR098026.fastq\nThe * character is a special type of character called a wildcard, which can be used to represent any number of any type of character. Thus, *.fastq matches every file that ends with .fastq.\nThis command:\n$ ls *977.fastq\nSRR097977.fastq\nlists only the file that ends with 977.fastq.\nThis command:\n$ ls /usr/bin/*.sh\n/usr/bin/gettext.sh   /usr/bin/lprsetup.sh          /usr/bin/unix-lpr.sh\n/usr/bin/lesspipe.sh  /usr/bin/setup-nsssysinit.sh\nLists every file in /usr/bin that ends in the characters .sh. Note that the output displays full paths to files, since each result starts with /.\n\n\n\n\n\n\nExercise\n\n\n\nDo each of the following tasks from your current directory using a single ls command for each:\n\nList all of the files in /usr/bin that start with the letter ‘c’.\nList all of the files in /usr/bin that contain the letter ‘a’.\nList all of the files in /usr/bin that end with the letter ‘o’.\n\nBonus: List all of the files in /usr/bin that contain the letter ‘a’ or the letter ‘c’.\nHint: The bonus question requires a Unix wildcard that we haven’t talked about yet. Try searching the internet for information about Unix wildcards to find what you need to solve the bonus problem.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ ls /usr/bin/c*\n$ ls /usr/bin/*a*\n$ ls /usr/bin/*o\n\n# Bonus\n$ ls /usr/bin/*[ac]*"
  },
  {
    "objectID": "work-with-files-and-dir.html#command-history",
    "href": "work-with-files-and-dir.html#command-history",
    "title": "3  Working with Files and Directories",
    "section": "3.2 Command History",
    "text": "3.2 Command History\nIf you want to repeat a command that you’ve run recently, you can access previous commands using the up arrow on your keyboard to go back to the most recent command. Likewise, the down arrow takes you forward in the command history.\nA few more useful shortcuts:\n\nCtrl + C will cancel the command you are writing, and give you a fresh prompt.\nCtrl + R will do a reverse-search through your command history. This is very useful.\nCtrl + L or the clear command will clear your screen.\n\nYou can also review your recent commands with the history command, by entering:\n$ history\nto see a numbered list of recent commands. You can reuse one of these commands directly by referring to the number of that command.\nFor example, if your history looked like this:\n259  ls *\n260  ls /usr/bin/*.sh\n261  ls *R1*fastq\nthen you could repeat command #260 by entering:\n$ !260\nType ! (exclamation point) and then the number of the command from your history. You will be glad you learned this when you need to re-run very complicated commands. For more information on advanced usage of history, read section 9.3 of Bash manual.\n\n\n\n\n\n\nExercise\n\n\n\nFind the line number in your history for the command that listed all the .sh files in /usr/bin. Rerun that command.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nFirst type history. Then use ! followed by the line number to rerun that command."
  },
  {
    "objectID": "work-with-files-and-dir.html#examining-files",
    "href": "work-with-files-and-dir.html#examining-files",
    "title": "3  Working with Files and Directories",
    "section": "3.3 Examining Files",
    "text": "3.3 Examining Files\nWe now know how to switch directories, run programs, and look at the contents of directories, but how do we look at the contents of files?\nOne way to examine a file is to print out all of the contents using the program cat, for “concatenate”.\nEnter the following command from within the untrimmed_fastq directory:\n$ cat SRR098026.fastq\nThis will print out all of the contents of the SRR098026.fastq to the screen.\n\n\n\n\n\n\nExercise\n\n\n\n\nPrint out the contents of the ~/shell_data/untrimmed_fastq/SRR097977.fastq file. What is the last line of the file?\nFrom your home directory, and without changing directories, use one short command to print the contents of all of the files in the ~/shell_data/untrimmed_fastq directory.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nThe last line of the file is C:CCC::CCCCCCCC&lt;8?6A:C28C&lt;608'&&&,'$.\ncat ~/shell_data/untrimmed_fastq/*\n\n\n\n\ncat is a terrific program, but when the file is really big, it can be annoying to use. The program, less, is useful for this case. less opens the file as read only, and lets you navigate through it. The navigation commands are identical to the man program.\nEnter the following command:\n$ less SRR097977.fastq\nSome navigation commands in less:\n\n\n\nkey\naction\n\n\n\n\nSpace\nto go forward\n\n\nb\nto go backward\n\n\ng\nto go to the beginning\n\n\nG\nto go to the end\n\n\nq\nto quit\n\n\n\nless also gives you a way of searching through files. Use the “/” key to begin a search. Enter the word you would like to search for and press enter. The screen will jump to the next location where that word is found.\n\n\n\n\n\n\nShortcut\n\n\n\n\n\nShortcut: If you hit “/” then “enter”, less will repeat the previous search. less searches from the current location and works its way forward. Scroll up a couple lines on your terminal to verify you are at the beginning of the file. Note, if you are at the end of the file and search for the sequence “CAA”, less will not find it. You either need to go to the beginning of the file (by typing g) and search again using / or you can use ? to search backwards in the same way you used / previously.\nFor instance, let’s search forward for the sequence TTTTT in our file. You can see that we go right to that sequence, what it looks like, and where it is in the file. If you continue to type / and hit return, you will move forward to the next instance of this sequence motif. If you instead type ? and hit return, you will search backwards and move up the file to previous examples of this motif.\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat are the next three nucleotides (characters) after the first instance of the sequence quoted above?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nCAC\n\n\n\nRemember, the man program actually uses less internally and therefore uses the same commands, so you can search documentation using “/” as well!\nThere’s another way that we can look at files, and in this case, just look at part of them. This can be particularly useful if we just want to see the beginning or end of the file, or see how it’s formatted.\nThe commands are head and tail and they let you look at the beginning and end of a file, respectively.\n$ head SRR098026.fastq\n@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n+SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n$ tail SRR098026.fastq\n+SRR098026.247 HWUSI-EAS1599_1:2:1:2:1311 length=35\n#!##!#################!!!!!!!######\n@SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35\nGNTGNGGTCATCATACGCGCCCNNNNNNNGGCATG\n+SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35\nB!;?!A=5922:##########!!!!!!!######\n@SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35\nCNCTNTATGCGTACGGCAGTGANNNNNNNGGAGAT\n+SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35\nA!@B!BBB@ABAB#########!!!!!!!######\nThe -n option to either of these commands can be used to print the first or last n lines of a file.\n$ head -n 1 SRR098026.fastq\n@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n$ tail -n 1 SRR098026.fastq\nA!@B!BBB@ABAB#########!!!!!!!######"
  },
  {
    "objectID": "work-with-files-and-dir.html#details-on-the-fastq-format",
    "href": "work-with-files-and-dir.html#details-on-the-fastq-format",
    "title": "3  Working with Files and Directories",
    "section": "3.4 Details on the FASTQ format",
    "text": "3.4 Details on the FASTQ format\nAlthough it looks complicated (and it is), it’s easy to understand the fastq format with a little decoding. Some rules about the format include…\n\n\n\n\n\n\n\nLine\nDescription\n\n\n\n\n1\nAlways begins with ‘@’ and then information about the read\n\n\n2\nThe actual DNA sequence\n\n\n3\nAlways begins with a ‘+’ and sometimes the same info in line 1\n\n\n4\nHas a string of characters which represent the quality scores; must have same number of characters as line 2\n\n\n\nWe can view the first complete read in one of the files in our dataset by using head to look at the first four lines.\n$ head -n 4 SRR098026.fastq\n@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\nAll but one of the nucleotides in this read are unknown (N). This is a pretty bad read!\nLine 4 shows the quality for each nucleotide in the read. Quality is interpreted as the probability of an incorrect base call (e.g. 1 in 10) or, equivalently, the base call accuracy (e.g. 90%). To make it possible to line up each individual nucleotide with its quality score, the numerical score is converted into a code where each individual character represents the numerical quality score for an individual nucleotide. For example, in the line above, the quality score line is:\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\nThe # character and each of the ! characters represent the encoded quality for an individual nucleotide. The numerical value assigned to each of these characters depends on the sequencing platform that generated the reads. The sequencing machine used to generate our data uses the standard Sanger quality PHRED score encoding, Illumina version 1.8 onwards. Each character is assigned a quality score between 0 and 42 as shown in the chart below.\nQuality encoding: !\"#$%&'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJK\n                  |         |         |         |         |\nQuality score:    0........10........20........30........40..                          \nEach quality score represents the probability that the corresponding nucleotide call is incorrect. This quality score is logarithmically based, so a quality score of 10 reflects a base call accuracy of 90%, but a quality score of 20 reflects a base call accuracy of 99%. These probability values are the results from the base calling algorithm and dependent on how much signal was captured for the base incorporation.\nLooking back at our read:\n@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\nwe can now see that the quality of each of the Ns is 0 and the quality of the only nucleotide call (C) is also very poor (# = a quality score of 2). This is indeed a very bad read."
  },
  {
    "objectID": "work-with-files-and-dir.html#manipulating-files",
    "href": "work-with-files-and-dir.html#manipulating-files",
    "title": "3  Working with Files and Directories",
    "section": "3.5 Manipulating files",
    "text": "3.5 Manipulating files\nNow we can move around in the file structure, look at files, and search files. But what if we want to copy files or move them around or get rid of them? Most of the time, you can do these sorts of file manipulations without the command line, but there will be some cases (like when you’re working with a remote computer like we are for this lesson) where it will be impossible. You’ll also find that you may be working with hundreds of files and want to do similar manipulations to all of those files. In cases like this, it’s much faster to do these operations at the command line.\n\n3.5.1 Copying Files\nWhen working with computational data, it’s important to keep a safe copy of that data that can’t be accidentally overwritten or deleted. For this lesson, our raw data is our FASTQ files. We don’t want to accidentally change the original files, so we’ll make a copy of them and change the file permissions so that we can read from, but not write to, the files.\nFirst, let’s make a copy of one of our FASTQ files using the cp command.\nNavigate to the shell_data/untrimmed_fastq directory and enter:\n$ cp SRR098026.fastq SRR098026-copy.fastq\n$ ls -F\nSRR097977.fastq  SRR098026-copy.fastq  SRR098026.fastq\nWe now have two copies of the SRR098026.fastq file, one of them named SRR098026-copy.fastq. We’ll move this file to a new directory called backup where we’ll store our backup data files.\n\n\n3.5.2 Creating Directories\nThe mkdir command is used to make a directory. Enter mkdir followed by a space, then the directory name you want to create:\n$ mkdir backup\n\n\n3.5.3 Moving and renaming\nWe can now move our backup file to this directory. We can move files around using the command mv:\n$ mv SRR098026-copy.fastq backup\n$ ls backup\nSRR098026-copy.fastq\nThe mv command is also how you rename files. Let’s rename this file to make it clear that this is a backup:\n$ cd backup\n$ mv SRR098026-copy.fastq SRR098026-backup.fastq\n$ ls\nSRR098026-backup.fastq\n\n\n3.5.4 File Permissions\nWe’ve now made a backup copy of our file, but just because we have two copies, it doesn’t make us safe. We can still accidentally delete or overwrite both copies. To make sure we can’t accidentally mess up this backup file, we’re going to change the permissions on the file so that we’re only allowed to read (i.e. view) the file, not write to it (i.e. make new changes).\nView the current permissions on a file using the -l (long) flag for the ls command:\n$ ls -l\n-rwx------ 1 [username] TSL_20 43332 Aug 11 13:58 SRR098026-backup.fastq\nThe first part of the output for the -l flag gives you information about the file’s current permissions. There are ten slots in the permissions list. The first character in this list is related to file type, not permissions, so we’ll ignore it for now. The next three characters relate to the permissions that the file owner has, the next three relate to the permissions for group members, and the final three characters specify what other users outside of your group can do with the file. We’re going to concentrate on the three positions that deal with your permissions (as the file owner).\n\nHere the three positions that relate to the file owner are rw-. The r means that you have permission to read the file, the w indicates that you have permission to write to (i.e. make changes to) the file, and the third position is a -, indicating that you don’t have permission to carry out the ability encoded by that space (this is the space where x or executable ability is stored, we’ll talk more about this in Chapter 5.\nOur goal for now is to change permissions on this file so that you no longer have w or write permissions. We can do this using the chmod (change mode) command and subtracting (-) the write permission -w.\n$ chmod u-w SRR098026-backup.fastq\n$ ls -l \n-rwx------ 1 [username] TSL_20 43332 Aug 11 13:58 SRR098026-backup.fastq\n\n\n3.5.5 Removing\nTo prove to ourselves that you no longer have the ability to modify this file, try deleting it with the rm command:\n$ rm SRR098026-backup.fastq\nYou’ll be asked if you want to override your file permissions:\nrm: remove regular file ‘SRR098026-backup.fastq’?\nYou should enter n for no. If you enter n (for no), the file will not be deleted. If you enter y, you will delete the file. This gives us an extra measure of security, as there is one more step between us and deleting our data files.\nImportant: The rm command permanently removes the file. Be careful with this command. It doesn’t just nicely put the files in the Trash. They’re really gone.\nBy default, rm will not delete directories. You can tell rm to delete a directory using the -r (recursive) option. Let’s delete the backup directory we just made.\nEnter the following command:\n$ cd ..\n$ rm -r backup\nThis will delete not only the directory, but all files within the directory. If you have write-protected files in the directory, you will be asked whether you want to override your permission settings.\n\n\n\n\n\n\nExercise\n\n\n\nStarting in the shell_data/untrimmed_fastq/ directory, do the following:\n\nMake sure that you have deleted your backup directory and all files it contains.\nCreate a backup of each of your FASTQ files using cp. (Note: You’ll need to do this individually for each of the two FASTQ files. We haven’t learned yet how to do this with a wildcard.)\nUse a wildcard to move all of your backup files to a new backup directory.\nChange the permissions on all of your backup files to allow groups and other users to read these files.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nrm -r backup\ncp SRR098026.fastq SRR098026-backup.fastq and cp SRR097977.fastq SRR097977-backup.fastq\nmkdir backup and mv *-backup.fastq backup\nchmod go-r backup/*-backup.fastq\nIt’s always a good idea to check your work with ls -l backup. You should see something like:\n\n-rwxr--r-- 1 jegoussc TSL_20 47552 Aug 11 14:08 SRR097977-backup.fastq\n-rwxr--r-- 1 jegoussc TSL_20 43332 Aug 11 14:08 SRR098026-backup.fastq"
  },
  {
    "objectID": "work-with-files-and-dir.html#summary",
    "href": "work-with-files-and-dir.html#summary",
    "title": "3  Working with Files and Directories",
    "section": "3.6 Summary",
    "text": "3.6 Summary\n\n\n\n\n\n\nKey points\n\n\n\n\nYou can view file contents using less, cat, head or tail.\nThe commands cp, mv, and mkdir are useful for manipulating existing files and creating new directories.\nYou can view file permissions using ls -l and change permissions using chmod.\nThe history command and the up arrow on your keyboard can be used to repeat recently used commands."
  },
  {
    "objectID": "redirection.html",
    "href": "redirection.html",
    "title": "4  Redirection",
    "section": "",
    "text": "5 File manipulation and more practices with pipes\nTo practice a bit more with the tools we’ve added to our tool kit so far and learn a few extra ones you can follow this extra lesson which uses the SRA metadata file."
  },
  {
    "objectID": "redirection.html#searching-files",
    "href": "redirection.html#searching-files",
    "title": "4  Redirection",
    "section": "4.1 Searching files",
    "text": "4.1 Searching files\nWe discussed in a previous episode how to search within a file using less. We can also search within files without even opening them, using grep. grep is a command-line utility for searching plain-text files for lines matching a specific set of characters (sometimes called a string) or a particular pattern (which can be specified using something called regular expressions). We’re not going to work with regular expressions in this lesson, and are instead going to specify the strings we are searching for. Let’s give it a try!\n\n\n\n\n\n\nNucleotide abbreviations\n\n\n\n\n\nThe four nucleotides that appear in DNA are abbreviated A, C, T and G. Unknown nucleotides are represented with the letter N. An N appearing in a sequencing file represents a position where the sequencing machine was not able to confidently determine the nucleotide in that position. You can think of an N as being aNy nucleotide at that position in the DNA sequence.\n\n\n\nWe’ll search for strings inside of our fastq files. Let’s first make sure we are in the correct directory:\n$ cd ~/shell_data/untrimmed_fastq\nSuppose we want to see how many reads in our file have really bad segments containing 10 consecutive unknown nucleotides (Ns).\nIn this lesson, we’re going to be manually searching for strings of Ns within our sequence results to illustrate some principles of file searching. It can be really useful to do this type of searching to get a feel for the quality of your sequencing results, however, in your research you will most likely use a bioinformatics tool that has a built-in program for filtering out low-quality reads.\nLet’s search for the string NNNNNNNNNN in the SRR098026 file:\n$ grep NNNNNNNNNN SRR098026.fastq\nThis command returns a lot of output to the terminal. Every single line in the SRR098026 file that contains at least 10 consecutive Ns is printed to the terminal, regardless of how long or short the file is. We may be interested not only in the actual sequence which contains this string, but in the name (or identifier) of that sequence. We discussed in a previous lesson that the identifier line immediately precedes the nucleotide sequence for each read in a FASTQ file. We may also want to inspect the quality scores associated with each of these reads. To get all of this information, we will return the line immediately before each match and the two lines immediately after each match.\nWe can use the -B argument for grep to return a specific number of lines before each match. The -A argument returns a specific number of lines after each matching line. Here we want the line before and the two lines after each matching line, so we add -B1 -A2 to our grep command:\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq\n\n\n\n\n\n\nExercise\n\n\n\n\nSearch for the sequence GNATNACCACTTCC in the SRR098026.fastq file. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match.\nSearch for the sequence AAGTT in both FASTQ files. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ grep -B1 GNATNACCACTTCC SRR098026.fastq\n @SRR098026.245 HWUSI-EAS1599_1:2:1:2:801 length=35\n GNATNACCACTTCCAGTGCTGANNNNNNNGGGATG\n\n$ grep -B1 AAGTT *.fastq\nSRR097977.fastq-@SRR097977.11 209DTAAXX_Lenski2_1_7:8:3:247:351 length=36\nSRR097977.fastq:GATTGCTTTAATGAAAAAGTCATATAAGTTGCCATG\n--\nSRR097977.fastq-@SRR097977.67 209DTAAXX_Lenski2_1_7:8:3:544:566 length=36\nSRR097977.fastq:TTGTCCACGCTTTTCTATGTAAAGTTTATTTGCTTT\n--\nSRR097977.fastq-@SRR097977.68 209DTAAXX_Lenski2_1_7:8:3:724:110 length=36\nSRR097977.fastq:TGAAGCCTGCTTTTTTATACTAAGTTTGCATTATAA\n--\nSRR097977.fastq-@SRR097977.80 209DTAAXX_Lenski2_1_7:8:3:258:281 length=36\nSRR097977.fastq:GTGGCGCTGCTGCATAAGTTGGGTTATCAGGTCGTT\n--\nSRR097977.fastq-@SRR097977.92 209DTAAXX_Lenski2_1_7:8:3:353:318 length=36\nSRR097977.fastq:GGCAAAATGGTCCTCCAGCCAGGCCAGAAGCAAGTT\n--\nSRR097977.fastq-@SRR097977.139 209DTAAXX_Lenski2_1_7:8:3:703:655 length=36\nSRR097977.fastq:TTTATTTGTAAAGTTTTGTTGAAATAAGGGTTGTAA\n--\nSRR097977.fastq-@SRR097977.238 209DTAAXX_Lenski2_1_7:8:3:592:919 length=36\nSRR097977.fastq:TTCTTACCATCCTGAAGTTTTTTCATCTTCCCTGAT\n--\nSRR098026.fastq-@SRR098026.158 HWUSI-EAS1599_1:2:1:1:1505 length=35\nSRR098026.fastq:GNNNNNNNNCAAAGTTGATCNNNNNNNNNTGTGCG"
  },
  {
    "objectID": "redirection.html#redirecting-output",
    "href": "redirection.html#redirecting-output",
    "title": "4  Redirection",
    "section": "4.2 Redirecting output",
    "text": "4.2 Redirecting output\ngrep allowed us to identify sequences in our FASTQ files that match a particular pattern. All of these sequences were printed to our terminal screen, but in order to work with these sequences and perform other operations on them, we will need to capture that output in some way.\nWe can do this with something called “redirection”. The idea is that we are taking what would ordinarily be printed to the terminal screen and redirecting it to another location. In our case, we want to print this information to a file so that we can look at it later and use other commands to analyze this data.\nThe command for redirecting output to a file is &gt;.\nLet’s try out this command and copy all the records (including all four lines of each record) in our FASTQ files that contain ‘NNNNNNNNNN’ to another file called bad_reads.txt.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n\n\n\n\n\n\nFile extensions\n\n\n\n\n\nYou might be confused about why we’re naming our output file with a .txt extension. After all, it will be holding FASTQ formatted data that we’re extracting from our FASTQ files. Won’t it also be a FASTQ file? The answer is, yes - it will be a FASTQ file and it would make sense to name it with a .fastq extension. However, using a .fastq extension will lead us to problems when we move to using wildcards later in this episode. We’ll point out where this becomes important. For now, it’s good that you’re thinking about file extensions!\n\n\n\nThe prompt should sit there a little bit, and then it should look like nothing happened. But type ls. You should see a new file called bad_reads.txt.\nWe can check the number of lines in our new file using a command called wc. wc stands for word count. This command counts the number of words, lines, and characters in a file. The FASTQ file may change over time, so given the potential for updates, make sure your file matches your instructor’s output.\nAs of Sept. 2020, wc gives the following output:\n$ wc bad_reads.txt\n802    1338   24012 bad_reads.txt\nThis will tell us the number of lines, words and characters in the file. If we want only the number of lines, we can use the -l flag for lines.\n$ wc -l bad_reads.txt\n802 bad_reads.txt\n\n\n\n\n\n\nExercise\n\n\n\nHow many sequences are there in SRR098026.fastq? Remember that every sequence is formed by four lines.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ wc -l SRR098026.fastq\n996\nNow you can divide this number by four to get the number of sequences in your fastq file.\n$ echo $((996 / 4))\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nHow many sequences in SRR098026.fastq contain at least 3 consecutive Ns?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ grep NNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n249\n\n\n\nWe might want to search multiple FASTQ files for sequences that match our search pattern. However, we need to be careful, because each time we use the &gt; command to redirect output to a file, the new output will replace the output that was already present in the file. This is called “overwriting” and, just like you don’t want to overwrite your video recording of your kid’s first birthday party, you also want to avoid overwriting your data files.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n$ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n0 bad_reads.txt\nHere, the output of our second call to wc shows that we no longer have any lines in our bad_reads.txt file. This is because the second file we searched (SRR097977.fastq) does not contain any lines that match our search sequence. So our file was overwritten and is now empty.\nWe can avoid overwriting our files by using the command &gt;&gt;. &gt;&gt; is known as the “append redirect” and will append new output to the end of a file, rather than overwriting it.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n802 bad_reads.txt\n$ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt;&gt; bad_reads.txt\n$ wc -l bad_reads.txt\n802 bad_reads.txt\nThe output of our second call to wc shows that we have not overwritten our original data.\nWe can also do this with a single line of code by using a wildcard:\n$ grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n802 bad_reads.txt\n\n\n\n\n\n\nFile extensions\n\n\n\n\n\nThis is where we would have trouble if we were naming our output file with a .fastq extension. If we already had a file called bad_reads.fastq (from our previous grep practice) and then ran the command above using a .fastq extension instead of a .txt extension, grep would give us a warning.\n$ grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.fastq\ngrep: input file ‘bad_reads.fastq’ is also the output\ngrep is letting you know that the output file bad_reads.fastq is also included in your grep call because it matches the *.fastq pattern. Be careful with this as it can lead to some unintended results.\n\n\n\n\n4.2.1 Pipes\nSince we might have multiple different criteria we want to search for, creating a new output file each time has the potential to clutter up our workspace. We also thus far haven’t been interested in the actual contents of those files, only in the number of reads that we’ve found. We created the files to store the reads and then counted the lines in the file to see how many reads matched our criteria. There’s a way to do this, however, that doesn’t require us to create these intermediate files - the pipe command (|).\nThis is probably not a key on your keyboard you use very much, so let’s all take a minute to find that key. For the standard QWERTY keyboard layout, the | character can be found using the key combination\n\nShift + \\\n\nWhat | does is take the output that is scrolling by on the terminal and uses that output as input to another command. When our output was scrolling by, we might have wished we could slow it down and look at it, like we can with less. Well it turns out that we can! We can redirect our output from our grep call through the less command.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | less\nWe can now see the output from our grep call within the less interface. We can use the up and down arrows to scroll through the output and use q to exit less.\nIf we don’t want to create a file before counting lines of output from our grep search, we could directly pipe the output of the grep search to the command wc -l. This can be helpful for investigating your output if you are not sure you would like to save it to a file.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | wc -l \nBecause we asked grep for all four lines of each FASTQ record, we need to divide the output by four to get the number of sequences that match our search pattern. Since 802 / 4 = 200.5 and we are expecting an integer number of records, there is something added or missing in bad_reads.txt. If we explore bad_reads.txt using less, we might be able to notice what is causing the uneven number of lines. Luckily, this issue happens by the end of the file so we can also spot it with tail.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ tail bad_reads.txt\n@SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\nANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN\n+SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n--\n--\n@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nThe fifth and six lines in the output display “–” which is the default action for grep to separate groups of lines matching the pattern, and indicate groups of lines which did not match the pattern so are not displayed. To fix this issue, we can redirect the output of grep to a second instance of grep as follows.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | grep -v '^--' &gt; bad_reads.fastq\n$ tail bad_reads.fastq\n+SRR098026.132 HWUSI-EAS1599_1:2:1:0:320 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n@SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\nANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN\n+SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nThe -v option in the second grep search stands for --invert-match meaning grep will now only display the lines which do not match the searched pattern, in this case '^--'. The caret (^) is an anchoring character matching the beginning of the line, and the pattern has to be enclose by single quotes so grep does not interpret the pattern as an extended option (starting with –).\n\n\n\n\n\n\nCustom control\n\n\n\nUse man grep to read more about other options to customize the output of grep including extended options, anchoring characters, and much more.\n\n\nRedirecting output is often not intuitive, and can take some time to get used to. Once you’re comfortable with redirection, however, you’ll be able to combine any number of commands to do all sorts of exciting things with your data!\nNone of the command line programs we’ve been learning do anything all that impressive on their own, but when you start chaining them together, you can do some really powerful things very efficiently."
  },
  {
    "objectID": "redirection.html#writing-for-loops",
    "href": "redirection.html#writing-for-loops",
    "title": "4  Redirection",
    "section": "5.1 Writing for loops",
    "text": "5.1 Writing for loops\nLoops are key to productivity improvements through automation as they allow us to execute commands repeatedly. Similar to wildcards and tab completion, using loops also reduces the amount of typing (and typing mistakes). Loops are helpful when performing operations on groups of sequencing files, such as unzipping or trimming multiple files. We will use loops for these purposes in subsequent analyses, but will cover the basics of them for now.\nWhen the shell sees the keyword for, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the variable, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variable’s value by putting $ in front of it. The $ tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command. In shell programming, this is usually called “expanding” the variable.\nSometimes, we want to expand a variable without any whitespace to its right. Suppose we have a variable named foo that contains the text abc, and would like to expand foo to create the text abcEFG.\n$ foo=abc\n$ echo foo is $foo\nfoo is abc\n$ echo foo is $fooEFG      # doesn't work\nfoo is\nThe interpreter is trying to expand a variable named fooEFG, which (probably) doesn’t exist. We can avoid this problem by enclosing the variable name in braces ({ and }, sometimes called “squiggle braces”). bash treats the # character as a comment character. Any text on a line after a # is ignored by bash when evaluating the text as code.\n$ foo=abc\n$ echo foo is $foo\nfoo is abc\n$ echo foo is ${foo}EFG      # now it works!\nfoo is abcEFG\nLet’s write a for loop to show us the first two lines of the fastq files we downloaded earlier. You will notice the shell prompt changes from $ to &gt; and back again as we were typing in our loop. The second prompt, &gt;, is different to remind us that we haven’t finished typing a complete command yet. A semicolon, ;, can be used to separate two commands written on a single line.\n$ cd ../untrimmed_fastq/\n$ for filename in *.fastq\n&gt; do\n&gt; head -n 2 ${filename}\n&gt; done\n\n\n\n\n\n\n-bash: -n: command not found\n\n\n\n\n\nYou used copy-paste for the for loop spanning over four line! But in this case, you must type each line one by one. It is possible to write the for loop as a single line:\nfor filename in *.fastq; do head -n 2 ${filename}; done\n\n\n\nThe for loop begins with the formula for &lt;variable&gt; in &lt;group to iterate over&gt;. In this case, the word filename is designated as the variable to be used over each iteration. In our case SRR097977.fastq and SRR098026.fastq will be substituted for filename because they fit the pattern of ending with .fastq in the directory we’ve specified. The next line of the for loop is do. The next line is the code that we want to execute. We are telling the loop to print the first two lines of each variable we iterate over. Finally, the word done ends the loop.\nAfter executing the loop, you should see the first two lines of both fastq files printed to the terminal. Let’s create a loop that will save this information to a file.\n$ for filename in *.fastq\n&gt; do\n&gt; head -n 2 ${filename} &gt;&gt; seq_info.txt\n&gt; done\nWhen writing a loop, you will not be able to return to previous lines once you have pressed Enter. Remember that we can cancel the current command using Ctrl + C.\nIf you notice a mistake that is going to prevent your loop for executing correctly.\nNote that we are using &gt;&gt; to append the text to our seq_info.txt file. If we used &gt;, the seq_info.txt file would be rewritten every time the loop iterates, so it would only have text from the last variable used. Instead, &gt;&gt; adds to the end of the file."
  },
  {
    "objectID": "redirection.html#using-basename-in-for-loops",
    "href": "redirection.html#using-basename-in-for-loops",
    "title": "4  Redirection",
    "section": "5.2 Using Basename in for loops",
    "text": "5.2 Using Basename in for loops\nBasename is a function in UNIX that is helpful for removing a uniform part of a name from a list of files. In this case, we will use basename to remove the .fastq extension from the files that we’ve been working with.\n$ basename SRR097977.fastq .fastq\nWe see that this returns just the SRR accession, and no longer has the .fastq file extension on it.\nSRR097977\nIf we try the same thing but use .fasta as the file extension instead, nothing happens. This is because basename only works when it exactly matches a string in the file.\n$ basename SRR097977.fastq .fasta\nSRR097977.fastq\nBasename is really powerful when used in a for loop. It allows to access just the file prefix, which you can use to name things. Let’s try this.\nInside our for loop, we create a new name variable. We call the basename function inside the parenthesis, then give our variable name from the for loop, in this case ${filename}, and finally state that .fastq should be removed from the file name. It’s important to note that we’re not changing the actual files, we’re creating a new variable called name. The line &gt; echo $name will print to the terminal the variable name each time the for loop runs. Because we are iterating over two files, we expect to see two lines of output.\n$ for filename in *.fastq\n&gt; do\n&gt; name=$(basename ${filename} .fastq)\n&gt; echo ${name}\n&gt; done\n\n\n\n\n\n\nExercise\n\n\n\nPrint the file prefix of all of the .txt files in our current directory.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ for filename in *.txt\n&gt; do\n&gt; name=$(basename ${filename} .txt)\n&gt; echo ${name}\n&gt; done\n\n\n\nOne way this is really useful is to move files. Let’s rename all of our .txt files using mv so that they have the years on them, which will document when we created them.\n$ for filename in *.txt\n&gt; do\n&gt; name=$(basename ${filename} .txt)\n&gt; mv ${filename}  ${name}_2022.txt\n&gt; done\n\n\n\n\n\n\nExercise\n\n\n\nRemove _2022 from all of the .txt files.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ for filename in *_2022.txt\n&gt; do\n&gt; name=$(basename ${filename} _2022.txt)\n&gt; mv ${filename} ${name}.txt\n&gt; done"
  },
  {
    "objectID": "redirection.html#summary",
    "href": "redirection.html#summary",
    "title": "4  Redirection",
    "section": "5.3 Summary",
    "text": "5.3 Summary\n\n\n\n\n\n\nKey points\n\n\n\n\ngrep is a powerful search tool with many options for customization.\n&gt;, &gt;&gt;, and | are different ways of redirecting output.\ncommand &gt; file redirects a command’s output to a file.\ncommand &gt;&gt; file redirects a command’s output to a file without overwriting the existing contents of the file.\ncommand_1 | command_2 redirects the output of the first command as input to the second command.\nfor loops are used for iteration.\nbasename gets rid of repetitive parts of names."
  },
  {
    "objectID": "scripting.html#writing-files",
    "href": "scripting.html#writing-files",
    "title": "5  Writing Scripts and Working with Data",
    "section": "5.1 Writing files",
    "text": "5.1 Writing files\nWe’ve been able to do a lot of work with files that already exist, but what if we want to write our own files? We’re not going to type in a FASTA file, but we’ll see as we go through other tutorials, there are a lot of reasons we’ll want to write a file, or edit an existing file.\nTo add text to files, we’re going to use a text editor called Nano. We’re going to create a file to take notes about what we’ve been doing with the data files in ~/shell_data/untrimmed_fastq.\nThis is good practice when working in bioinformatics. We can create a file called README.txt that describes the data files in the directory or documents how the files in that directory were generated. As the name suggests, it’s a file that we or others should read to understand the information in that directory.\nLet’s change our working directory to ~/shell_data/untrimmed_fastq using cd, then run nano to create a file called README.txt:\n$ cd ~/shell_data/untrimmed_fastq\n$ nano README.txt\nYou should see something like this:\n\nThe text at the bottom of the screen shows the keyboard shortcuts for performing various tasks in nano. We will talk more about how to interpret this information soon.\n\n\n\n\n\n\nWhich Editor?\n\n\n\n\n\nWhen we say, “nano is a text editor,” we really do mean “text”: nano can only work with plain character data, not tables, images, or any other human-friendly media. We use nano in examples because it is one of the least complex text editors. However, because of this trait, nano may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and Mac OS X), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called notepad that can be run from the command line in the same way as nano for the purposes of this lesson.\nNo matter what editor you use, you will need to know the default location where it searches for files and where files are saved. If you start an editor from the shell, it will (probably) use your current working directory as its default location. If you use your computer’s start menu, the editor may want to save files in your desktop or documents directory instead. You can change this by navigating to another directory the first time you “Save As…”\n\n\n\nLet’s type in a few lines of text. Describe what the files in this directory are or what you’ve been doing with them. Once we’re happy with our text, we can press Ctrl-O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. You’ll be asked what file we want to save this to: press Return to accept the suggested default of README.txt.\nOnce our file is saved, we can use Ctrl-X to quit the nano editor and return to the shell.\nThe Control key is also called the “Ctrl” key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Ctrl key and, while holding it down, press the X key, described as any of:\n\nControl-X\nControl+X\nCtrl-X\nCtrl+X\n^X\nC-x\n\nIn nano, along the bottom of the screen you’ll see ^G Get Help ^O WriteOut. This means that you can use Ctrl-G to get help and Ctrl-O to save your file.\nNow you’ve written a file. You can take a look at it with less or cat, or open it up again and edit it with nano.\n\n\n\n\n\n\nExercise\n\n\n\nOpen README.txt and add the date to the top of the file and save the file.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nUse nano README.txt to open the file.\nAdd today’s date and then use Ctrl-X followed by y and Enter to save."
  },
  {
    "objectID": "scripting.html#writing-scripts",
    "href": "scripting.html#writing-scripts",
    "title": "5  Writing Scripts and Working with Data",
    "section": "5.2 Writing scripts",
    "text": "5.2 Writing scripts\nA really powerful thing about the command line is that you can write scripts. Scripts let you save commands to run them and also lets you put multiple commands together. Though writing scripts may require an additional time investment initially, this can save you time as you run them repeatedly. Scripts can also address the challenge of reproducibility: if you need to repeat an analysis, you retain a record of your command history within the script.\nOne thing we will commonly want to do with sequencing results is pull out bad reads and write them to a file to see if we can figure out what’s going on with them. We’re going to look for reads with long sequences of N’s like we did before, but now we’re going to write a script, so we can run it each time we get new sequences, rather than type the code in by hand each time.\nWe’re going to create a new file to put this command in. We’ll call it bad-reads-script.sh. The sh isn’t required, but using that extension tells us that it’s a shell script.\n$ nano bad-reads-script.sh\nBad reads have a lot of N’s, so we’re going to look for NNNNNNNNNN with grep. We want the whole FASTQ record, so we’re also going to get the one line above the sequence and the two lines below. We also want to look in all the files that end with .fastq, so we’re going to use the * wildcard. We write the following line in our script using nano:\ngrep -B1 -A2 -h NNNNNNNNNN *.fastq | grep -v '^--' &gt; scripted_bad_reads.txt\n\n\n\n\n\n\nNote\n\n\n\nWe introduced the -v option, now we are using -h to “Suppress the prefixing of file names on output” according to the documentation shown by man grep.\n\n\nType your grep command into the file and save it as before. Be careful that you did not add the $ at the beginning of the line.\nQuit nano by hitting Ctrl + x and y.\nNow comes the neat part. We can run this script. Type:\n$ bash bad-reads-script.sh\nIt will look like nothing happened, but now if you look at scripted_bad_reads.txt, you can see that there are now reads in the file.\n\n\n\n\n\n\nExercise\n\n\n\nWe want the script to tell us when it’s done.\n\nOpen bad-reads-script.sh with nano and add the line echo \"Script finished!\" after the grep command and save the file.\nRun the updated script.\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n$ bash bad-reads-script.sh\nScript finished!"
  },
  {
    "objectID": "scripting.html#making-the-script-into-a-program",
    "href": "scripting.html#making-the-script-into-a-program",
    "title": "5  Writing Scripts and Working with Data",
    "section": "5.3 Making the script into a program",
    "text": "5.3 Making the script into a program\nWe had to type bash because we needed to tell the computer what program to use to run this script. Instead, we can turn this script into its own program. We need to tell the computer that this script is a program by making the script file executable. We can do this by changing the file permissions. We talked about permissions in Chapter 3.\nFirst, let’s look at the current permissions.\n$ ls -l bad-reads-script.sh\n-rwx------ 1 [username] TSL_20 100 Aug 11 14:38 bad-reads-script.sh\nWe see that it says -rwx------. This shows that the file can be read, modified and executed by you the file owner (you). We want to change these permissions so that the file can be executed as a program by anyone (groups and other users). We use the command chmod like we did earlier when we removed write permissions. Here we are adding (+) executable permissions (+x).\n$ chmod +x bad-reads-script.sh\nNow let’s look at the permissions again.\n$ ls -l bad-reads-script.sh\n-rwx--x--x 1 [username] TSL_20 100 Aug 11 14:38 bad-reads-script.sh\nNow we see that it says -rwx–x--x. The x’s that are there now tell us we can run it as a program. So, let’s try it! We’ll need to put ./ at the beginning so the computer knows to look here in this directory for the program.\n$ ./bad-reads-script.sh\nThe script should run the same way as before, but now we’ve created our very own computer program!\nYou will learn more about writing scripts in a later lesson."
  },
  {
    "objectID": "scripting.html#moving-and-downloading-data",
    "href": "scripting.html#moving-and-downloading-data",
    "title": "5  Writing Scripts and Working with Data",
    "section": "5.4 Moving and Downloading Data",
    "text": "5.4 Moving and Downloading Data\nSo far, we’ve worked with data that is already on the remote server. Usually, however, most analyses begin with moving data onto your directories on a server. Below we’ll show you some commands to download data onto your instance, or to move data between your computer and the cloud.\n\n\n\n\n\n\nNo internet on HPC\n\n\n\nThe HPC is not connected to the internet for security reasons so you must log out of the HPC to download files on your own device. Then the files can be transferred to the HPC.\n$ logout\nConnection to hpc.nbi.ac.uk closed.\n\n\n\n5.4.1 Getting data from the cloud\nThere are two programs that will download data from a remote server to your local (or remote) machine: wget and curl. They were designed to do slightly different tasks by default, so you’ll need to give the programs somewhat different options to get the same behaviour, but they are mostly interchangeable.\n\nwget is short for “world wide web get”, and it’s basic function is to download web pages or data at a web address.\ncurl is a pun, it is supposed to be read as “see URL”, so its basic function is to display webpages or data at a web address.\n\nWhich one you need to use mostly depends on your operating system, as most computers will only have one or the other installed by default.\nLet’s say you want to download some data from Ensembl. We’re going to download a very small tab-delimited file that just tells us what data is available on the Ensembl bacteria server. Before we can start our download, we need to know whether we’re using curl or wget.\nTo see which program you have, type:\n$ which curl\n$ which wget\nwhich is a BASH program that looks through everything you have installed, and tells you what folder it is installed to. If it can’t find the program you asked for, it returns nothing, i.e. gives you no results.\nOn Mac OSX, you’ll likely get the following output:\n$ which curl\n/usr/bin/curl\n$ which wget\n$\nThis output means that you have curl installed, but not wget.\nOnce you know whether you have curl or wget, use one of the following commands to download the file:\n$ cd MyDocuments  # directory on your local machine\n$ wget ftp://ftp.ensemblgenomes.org/pub/release-37/bacteria/species_EnsemblBacteria.txt\nor\n$ cd MyDocuments\n$ curl -O ftp://ftp.ensemblgenomes.org/pub/release-37/bacteria/species_EnsemblBacteria.txt\nSince we wanted to download the file rather than just view it, we used wget without any modifiers. With curl however, we had to use the -O flag, which simultaneously tells curl to download the page instead of showing it to us and specifies that it should save the file using the same name it had on the server: species_EnsemblBacteria.txt\nIt’s important to note that both curl and wget download to the computer that the command line belongs to. So, if you are logged into AWS on the command line and execute the curl command above in the AWS terminal, the file will be downloaded to your AWS machine, not your local one.\n\n\n5.4.2 Moving files between your laptop and the server\nIt is possible to access the NBI server using the Windows navigation system. To do so, you must map the network drive:\n\nAccess your computer (by clicking on the computer icon on your desktop) .\nUnder the “Computer” tab, use the pull-down menu “Map network drive” and select “Map network drive”. This will open a pop-up window asking what network drive you would like to map\nUnder “Folder” enter \\\\tsl-hpc-data\\HPC-Home and click “Finish”.\nYou now have access to HPC-Home through the Windows navigation system.\n\n\n\n\n\n\n\n\nStep 1\n\n\n\n\n\n\n\nStep 2\n\n\n\n\n\n\n\n\n\nStep 3\n\n\n\n\n\n\n\nStep 4\n\n\n\n\nFigure 5.1: Screen captures of the steps to map network drive."
  },
  {
    "objectID": "scripting.html#summary",
    "href": "scripting.html#summary",
    "title": "5  Writing Scripts and Working with Data",
    "section": "5.5 Summary",
    "text": "5.5 Summary\n\n\n\n\n\n\nKey points\n\n\n\n\nScripts are a collection of commands executed together.\nTransferring information to and from virtual and local computers."
  },
  {
    "objectID": "organisation.html#getting-your-project-started",
    "href": "organisation.html#getting-your-project-started",
    "title": "6  Organisation",
    "section": "6.1 Getting your project started",
    "text": "6.1 Getting your project started\nProject organization is one of the most important parts of a sequencing project, and yet is often overlooked amidst the excitement of getting a first look at new data. Of course, while it’s best to get yourself organized before you even begin your analyses, it’s never too late to start, either.\nYou should approach your sequencing project similarly to how you do a biological experiment and this ideally begins with experimental design. We’re going to assume that you’ve already designed a beautiful sequencing experiment to address your biological question, collected appropriate samples, and that you have enough statistical power to answer the questions you’re interested in asking. These steps are all incredibly important, but beyond the scope of our course. For all of those steps (collecting specimens, extracting DNA, prepping your samples) you’ve likely kept a lab notebook that details how and why you did each step. However, the process of documentation doesn’t stop at the sequencer!\nGenomics projects can quickly accumulate hundreds of files across tens of folders. Every computational analysis you perform over the course of your project is going to create many files, which can especially become a problem when you’ll inevitably want to run some of those analyses again. For instance, you might have made significant headway into your project, but then have to remember the PCR conditions you used to create your sequencing library months prior.\nOther questions might arise along the way:\n\nWhat were your best alignment results?\nWhich folder were they in: Analysis1, AnalysisRedone, Analysis1a, or AnalysisRedone2?\nWhich quality cutoff did you use?\nWhat version of a given program did you implement your analysis in?\n\nGood documentation is key to avoiding this issue, and luckily enough, recording your computational experiments is even easier than recording lab data. Copy/Paste will become your best friend, sensible file names will make your analysis understandable by you and your collaborators, and writing the methods section for your next paper will be easy! Remember that in any given project of yours, it’s worthwhile to consider a future version of yourself as an entirely separate collaborator. The better your documentation is, the more this ‘collaborator’ will feel indebted to you!\nWith this in mind, let’s have a look at the best practices for documenting your genomics project. Your future self will thank you.\nIn this exercise we will setup a file system for the project we will be working on during this workshop.\n\n\n\n\n\n\nWarning\n\n\n\nMake sure you are connected to the remote server:\n$ ssh [username]@hpc.nbi.ac.uk\n\n\nWe will start by creating a directory that we can use for the rest of the workshop. First navigate to your home directory. Then confirm that you are in the correct directory using the pwd command.\n$ cd\n$ pwd\n/hpc-home/[username]/\n\n\n\n\n\n\nExercise\n\n\n\nUse the command like to make the following directories:\n\ndc_workshop\ndc_workshop/docs\ndc_workshop/data\ndc_workshop/results\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n$ mkdir dc_workshop\n$ mkdir dc_workshop/docs\n$ mkdir dc_workshop/data\n$ mkdir dc_workshop/results\n\n\nUse ls -R to verify that you have created these directories. The -R option for ls stands for recursive. This option causes ls to return the contents of each subdirectory within the directory iteratively.\n$ ls -R dc_workshop\ndc_workshop/:\ndata  docs  results\n\ndc_workshop/data:\n\ndc_workshop/docs:\n\ndc_workshop/results:"
  },
  {
    "objectID": "organisation.html#organizing-your-files",
    "href": "organisation.html#organizing-your-files",
    "title": "6  Organisation",
    "section": "6.2 Organizing your files",
    "text": "6.2 Organizing your files\nBefore beginning any analysis, it’s important to save a copy of your raw data. The raw data should never be changed. Regardless of how sure you are that you want to carry out a particular data cleaning step, there’s always the chance that you’ll change your mind later or that there will be an error in carrying out the data cleaning and you’ll need to go back a step in the process. Having a raw copy of your data that you never modify guarantees that you will always be able to start over if something goes wrong with your analysis. When starting any analysis, you can make a copy of your raw data file and do your manipulations on that file, rather than the raw version. We learned previously (in Section 3.5.4) how to prevent overwriting our raw data files by setting restrictive file permissions.\nYou can store any results that are generated from your analysis in the results folder. This guarantees that you won’t confuse results file and data files in six months or two years when you are looking back through your files in preparation for publishing your study.\nThe docs folder is the place to store any written analysis of your results, notes about how your analyses were carried out, and documents related to your eventual publication."
  },
  {
    "objectID": "organisation.html#documenting-your-activity-on-the-project",
    "href": "organisation.html#documenting-your-activity-on-the-project",
    "title": "6  Organisation",
    "section": "6.3 Documenting your activity on the project",
    "text": "6.3 Documenting your activity on the project\nWhen carrying out wet-lab analyses, most scientists work from a written protocol and keep a hard copy of written notes in their lab notebook, including any things they did differently from the written protocol. This detailed record-keeping process is just as important when doing computational analyses. Luckily, it’s even easier to record the steps you’ve carried out computational than it is when working at the bench.\nThe history command is a convenient way to document all the commands you have used while analyzing and manipulating your project files. Let’s document the work we have done on our project so far.\nView the commands that you have used so far during this session using history:\n$ history\nThe history likely contains many more commands than you have used for the current project. Let’s view the last several commands that focus on just what we need for this project.\nView the last n lines of your history (where n = approximately the last few lines you think relevant). For our example, we will use the last 7:\n$ history | tail -n 7\n\n\n\n\n\n\nExercise\n\n\n\nUsing your knowledge of the shell, use the append redirect &gt;&gt; to create a file called dc_workshop_log_XXXX_XX_XX.sh (Use the four-digit year, two-digit month, and two digit day, e.g. dc_workshop_log_2021_10_27.sh)\n\n\n\n\n\n\n\n\nSolution\n\n\n\n$ history | tail -n 7 &gt;&gt; dc_workshop_log_2022_10_20.sh\nNote we used the last 7 lines as an example, the number of lines may vary.\n\n\nYou may have noticed that your history contains the history command itself. To remove this redundancy from our log, let’s use the nano text editor to fix the file:\n$ nano dc_workshop_log_2022_10_20.sh\n\n\n\n\n\n\nNavigating in Nano\n\n\n\nAlthough nano is useful, it can be frustrating to edit documents, as you can’t use your mouse to navigate to the part of the document you would like to edit. Here are some useful keyboard shortcuts for moving around within a text document in nano. You can find more information by typing Ctrl-G within nano.\n\n\n\n\n\n\n\nkey\naction\n\n\n\n\nCtrl-Space OR Ctrl-→\nto move forward one word\n\n\nAlt-Space OR Esc-Space OR Ctrl-←\nto move back one word\n\n\nCtrl-A\nto move to the beginning of the current line\n\n\nCtrl-E\nto move to the end of the current line\n\n\nCtrl-W\nto search\n\n\n\n\n\nAdd a date line and comment to the line where you have created the directory. Recall that any text on a line after a # is ignored by bash when evaluating the text as code. For example:\n# 2022_10_20   \n# Created sample directories for the course\nNext, remove any lines of the history that are not relevant by navigating to those lines and using your delete key. Save your file and close nano.\nYour file should look something like this:\n# 2022_10_20   \n# Created sample directories for the course\n\nmkdir dc_workshop\nmkdir dc_workshop/docs\nmkdir dc_workshop/data\nmkdir dc_workshop/results\nIf you keep this file up to date, you can use it to re-do your work on your project if something happens to your results files. To demonstrate how this works, first delete your dc_workshop directory and all of its subdirectories. Look at your directory contents to verify the directory is gone.\n$ rm -r dc_workshop\n$ ls\nshell_data  dc_workshop_log_2022_10_20.sh\n$ bash dc_workshop_log_2017_10_27.sh\n$ ls\nshell_data  dc_workshop dc_workshop_log_2017_10_27.sh\nIt’s important that we keep our workshop log file outside of our dc_workshop directory if we want to use it to recreate our work. It’s also important for us to keep it up to date by regularly updating with the commands that we used to generate our results files.\nCongratulations! You’ve finished your introduction to using the shell for genomics projects. You now know how to navigate your file system, create, copy, move, and remove files and directories, and automate repetitive tasks using scripts and wildcards. With this solid foundation, you’re ready to move on to apply all of these new skills to carrying out more sophisticated bioinformatics analysis work. Don’t worry if everything doesn’t feel perfectly comfortable yet. We’re going to have many more opportunities for practice as we move forward on our bioinformatics journey!"
  },
  {
    "objectID": "organisation.html#summary",
    "href": "organisation.html#summary",
    "title": "6  Organisation",
    "section": "6.4 Summary",
    "text": "6.4 Summary\n\n\n\n\n\n\nKey points\n\n\n\n\nSpend the time to organize your file system when you start a new project. Your future self will thank you!\nAlways save a write-protected copy of your raw data.\n\n\n\nIf you want to read more about how to organise your project, you can read the Quick Guide to Organizing Computational Biology Projects (Noble 2009).\n\n\n\n\nNoble, William Stafford. 2009. “A Quick Guide to Organizing Computational Biology Projects.” PLOS Computational Biology 5 (7): 1–5. https://doi.org/10.1371/journal.pcbi.1000424."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Becker, Erin Alison, Anita Schürch, Tracy Teal, Sheldon John McKay,\nJessica Elizabeth Mizzi, François Michonneau, Amy E. Hodge, et al. 2019.\n“datacarpentry/shell-genomics: Data\nCarpentry: Introduction to the shell for genomics data, June\n2019.” Zenodo. https://doi.org/10.5281/zenodo.3260560.\n\n\nNoble, William Stafford. 2009. “A Quick Guide to Organizing\nComputational Biology Projects.” PLOS Computational\nBiology 5 (7): 1–5. https://doi.org/10.1371/journal.pcbi.1000424."
  }
]